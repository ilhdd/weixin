from flask import Flask, request, jsonify
import logging

app = Flask(__name__)

# 配置日志
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# 模拟固定的输出结果
FIXED_OUTPUT = {
    "最佳旅游路线": {
        "标题": "上海至北京五一全家旅游方案（基于木桶效应，优先保障基础需求）",
        "行程安排": [
            {
                "日期": "Day 1",
                "景点安排": "天安门广场（上午）→ 故宫（下午，提前预约）→ 景山公园（傍晚观日落）",
                "费用": {
                    "门票": "故宫60元，景山公园免费",
                    "交通": "地铁+打车，约50元"
                },
                "交通方式": "地铁+打车",
                "景点介绍": {
                    "天安门广场": "北京市中心地标，适合拍照留念。",
                    "故宫": "明清皇家宫殿，建议午门进、神武门出，老人可租轮椅（免费）。",
                    "景山公园": "俯瞰故宫全景，傍晚观日落。"
                },
                "美食推荐": [
                    "护国寺小吃：豌豆黄、驴打滚（人均20元）。",
                    "东来顺涮肉（分店多）：午市套餐人均80元。"
                ]
            },
            {
                "日期": "Day 2",
                "景点安排": "颐和园（上午，乘船游湖）→ 圆明园（下午，电瓶车游览）→ 鸟巢/水立方（夜晚灯光）",
                "费用": {
                    "门票": "颐和园30元，圆明园25元，鸟巢/水立方外观免费",
                    "交通": "地铁+打车，约60元"
                },
                "交通方式": "地铁+打车",
                "景点介绍": {
                    "颐和园": "昆明湖泛舟+长廊漫步，适合全家放松。",
                    "圆明园": "电瓶车游览，减少步行压力。",
                    "鸟巢/水立方": "夜晚灯光秀，适合拍照。"
                },
                "美食推荐": [
                    "方砖厂炸酱面（南锣鼓巷）：25元/碗，谢霆锋同款。",
                    "大鸭梨烤鸭（性价比高，半只鸭98元）。"
                ]
            },
            {
                "日期": "Day 3",
                "景点安排": "八达岭长城（早班高铁+缆车上下）→ 什刹海/南锣鼓巷（傍晚休闲）",
                "费用": {
                    "门票": "长城40元，缆车往返140元",
                    "交通": "高铁往返约60元，地铁+打车约40元"
                },
                "交通方式": "高铁+地铁+打车",
                "景点介绍": {
                    "八达岭长城": "缆车直达北七楼，减少攀登强度，五一早7点前抵达可避人流。",
                    "什刹海/南锣鼓巷": "休闲街区，适合散步和品尝小吃。"
                },
                "美食推荐": [
                    "护国寺小吃：豌豆黄、驴打滚（人均20元）。",
                    "东来顺涮肉（分店多）：午市套餐人均80元。"
                ]
            },
            {
                "日期": "Day 4",
                "景点安排": "北京动物园（看熊猫）→ 北海公园划船 → 返程",
                "费用": {
                    "门票": "动物园15元，北海公园10元，划船约50元",
                    "交通": "地铁+打车，约50元"
                },
                "交通方式": "地铁+打车",
                "景点介绍": {
                    "北京动物园": "看熊猫，适合儿童。",
                    "北海公园": "划船赏白塔，老年人与儿童友好。"
                },
                "美食推荐": [
                    "方砖厂炸酱面（南锣鼓巷）：25元/碗，谢霆锋同款。",
                    "大鸭梨烤鸭（性价比高，半只鸭98元）。"
                ]
            }
        ],
        "总费用": {
            "高铁交通": "4424元",
            "住宿": "1200元",
            "餐饮": "600元",
            "门票": "300元",
            "其他": "476元",
            "总预算": "7000元",
            "超支说明": "若需压缩至5000元，建议交通降级、缩短行程、餐饮调整。"
        }
    }
}

@app.route('/deepseek_test', methods=['POST'])
def deepseek_test():
    # 获取用户输入
    data = request.json

    # 首先尝试获取 user_id
    user_id = data.get("user_id")  # 用户 ID
    
    # 验证用户 ID 是否存在
    if not user_id:
        return jsonify({"error": "user_id is required"}), 400

    # 继续解析其他参数
    age_groups = {
        "young": data.get("young", "?"),  # 青年人数，缺失时用 ? 表示
        "middle": data.get("middle", "?"),  # 中年人数，缺失时用 ? 表示
        "old": data.get("old", "?")  # 老年人数，缺失时用 ? 表示
    }
    time = data.get("time", "?")  # 旅行时间，缺失时用 ? 表示
    city = data.get("city", "?")  # 旅行地点，缺失时用 ? 表示
    budget = data.get("budget", "?")  # 预算，缺失时用 ? 表示
    transportation = data.get("transportation", "?")  # 交通方式，缺失时用 ? 表示
    departure = data.get("departure", "?")  # 出发位置，缺失时用 ? 表示
    destination = data.get("destination", "?")  # 想要去的位置，缺失时用 ? 表示
    user_feedback = data.get("feedback", "")  # 用户反馈（可选）

    # 检查 age_groups 中是否有任何值为 "0"
    if any(age == "0" for age in age_groups.values()):
        logger.info(f"用户 {user_id} 的 age_groups 中有值为 '0'，停止请求并清理缓存。")
        return jsonify({"error": "age_groups 中有值为 '0'，请求被拒绝"}), 400

    # 打印接收到的用户输入
    logger.info(f"用户 {user_id} 的输入数据: {data}")

    # 直接返回固定的输出结果
    logger.info(f"返回固定的输出结果给用户 {user_id}。")
    return jsonify(FIXED_OUTPUT)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001)